**FUNCTIONS**
1) char	*readline (const char *prompt);
readline - get a line from a user with editing

DESCRIPTION
       readline will read a line from the terminal and return it, using
       prompt as a prompt.  If prompt is NULL or the empty string, no
       prompt is issued.  The line returned is allocated with malloc(3);
       the caller must free it when finished.  The line returned has the
       final newline removed, so only the text of the line remains.

       readline offers editing capabilities while the user is entering
       the line.  By default, the line editing commands are similar to
       those of emacs.  A vi-style line editing interface is also
       available.

       This manual page describes only the most basic use of readline.
       Much more functionality is available; see The GNU Readline
       Library and The GNU History Library for additional information.
RETURN VALUE
       readline returns the text of the line read.  A blank line returns
       the empty string.  If EOF is encountered while reading a line,
       and the line is empty, NULL is returned.  If an EOF is read with
       a non-empty line, it is treated as a newline.

2) void rl_clear_history (void)
Clear the history list by deleting all of the entries, in the same manner as the History library’s clear_history() function. This differs from clear_history because it frees private data Readline saves in the history list.

3) int rl_on_new_line (void)
Tell the update functions that we have moved onto a new (empty) line, usually after outputting a newline.

4) void rl_replace_line (const char *text, int clear_undo)
Replace the contents of rl_line_buffer with text. The point and mark are preserved, if possible. If clear_undo is non-zero, the undo list associated with the current line is cleared.

5) void rl_redisplay (void)
Change what’s displayed on the screen to reflect the current contents of rl_line_buffer.

6) void add_history (const char *string)
Place string at the end of the history list. The associated data field (if any) is set to NULL.

7) printf, malloc, free, access, open, read, close, fork

8) wait, waitpid, wait3, wait4

9) void (*signal(int sig, void (*func)(int)))(int);
signal, sigaction, sigemptyset, sigaddset

10) kill, exit

11) char *getcwd(char *buf, size_t size);
The getcwd() function copies an absolute pathname of the current working directory to the array pointed to by buf, which is of length size.

12) 

**STEPS**


**THINGS TO ADD**
* Why do we have a list of infiles and outfiles?
- Reason is that there could be multiple infiles or outfiles in the same prompt